{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-cli üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Command-line interface for Laminas projects Installation Via Composer Install the library using Composer : $ composer require laminas/laminas-cli Usage $ vendor/bin/laminas [--container=&lt;path&gt;] [command-name] Custom command If you want to add a command for a Laminas MVC or Mezzio application, implement a standard Symfony console command and register the command to use with laminas-cli via application configuration: return [ 'laminas-cli' =&gt; [ 'commands' =&gt; [ 'package:command-name' =&gt; MyCommand::class, ], ], ]; Please remember that if a command has any constructor dependencies, you should also map a factory for the command within the container. For Laminas MVC applications, this would like like: return [ 'service_manager' =&gt; [ 'factories' =&gt; [ MyCommand::class =&gt; MyCommandFactory::class, ], ], ]; For Mezzio applications, this would like like: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ MyCommand::class =&gt; MyCommandFactory::class, ], ], ];","title":"Home"},{"location":"#laminas-cli","text":"","title":"laminas-cli"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Command-line interface for Laminas projects","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#installation","text":"","title":"Installation"},{"location":"#usage","text":"$ vendor/bin/laminas [--container=&lt;path&gt;] [command-name]","title":"Usage"},{"location":"#custom-command","text":"If you want to add a command for a Laminas MVC or Mezzio application, implement a standard Symfony console command and register the command to use with laminas-cli via application configuration: return [ 'laminas-cli' =&gt; [ 'commands' =&gt; [ 'package:command-name' =&gt; MyCommand::class, ], ], ]; Please remember that if a command has any constructor dependencies, you should also map a factory for the command within the container. For Laminas MVC applications, this would like like: return [ 'service_manager' =&gt; [ 'factories' =&gt; [ MyCommand::class =&gt; MyCommandFactory::class, ], ], ]; For Mezzio applications, this would like like: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ MyCommand::class =&gt; MyCommandFactory::class, ], ], ];","title":"Custom command"},{"location":"autocompletion/","text":"Autocompletion laminas-cli does not provide autocompletion out of the box. However, it is possible to add autocompletion via a third-party package, bamarni/symfony-console-autocomplete . This package provides completion for any symfony/console-based application, which means it will work with laminas-cli as well. Installation First, install the autocompletion package as a global tool: composer global require bamarni/symfony-console-autocomplete Configuration Second, you will need to add configuration for your shell. We will add three things: Configuration to ensure your Composer script path is in your $PATH . An alias for the laminas-cli script. This is done so that autocompletion is given for the project in which you have it installed. The autocompletion script. For most shells, you can use the following: # Skip this step if you already have the Composer script path in your $PATH export PATH=$(composer global config home)/vendor/bin:$PATH # Alias laminas-cli to current path alias laminas=./vendor/bin/laminas # Add the autocompletion script, informing it to also complete laminas eval \"$(symfony-autocomplete --aliases laminas)\" The above should be placed in your shell configuration file: For BASH users, $HOME/.bashrc For ZSH users, $HOME/.zshrc For FISH users, $HOME/.config/fish/config.fish Once the changes have been made, either open a new terminal, or source your shell configuration: For BASH users, source $HOME/.bashrc For ZSH users, source $HOME/.zshrc For FISH users, source $HOME/.config/fish/config.fish Usage Once installation and configuration of the tooling is complete and you are either in a new terminal or have sourced the changes to your shell configuration, you can invoke autocompletion by pressing &lt;Tab&gt; after typing the laminas command at the prompt: $ laminas &lt;TAB&gt;","title":"Autocompletion"},{"location":"autocompletion/#autocompletion","text":"laminas-cli does not provide autocompletion out of the box. However, it is possible to add autocompletion via a third-party package, bamarni/symfony-console-autocomplete . This package provides completion for any symfony/console-based application, which means it will work with laminas-cli as well.","title":"Autocompletion"},{"location":"autocompletion/#installation","text":"First, install the autocompletion package as a global tool: composer global require bamarni/symfony-console-autocomplete","title":"Installation"},{"location":"autocompletion/#configuration","text":"Second, you will need to add configuration for your shell. We will add three things: Configuration to ensure your Composer script path is in your $PATH . An alias for the laminas-cli script. This is done so that autocompletion is given for the project in which you have it installed. The autocompletion script. For most shells, you can use the following: # Skip this step if you already have the Composer script path in your $PATH export PATH=$(composer global config home)/vendor/bin:$PATH # Alias laminas-cli to current path alias laminas=./vendor/bin/laminas # Add the autocompletion script, informing it to also complete laminas eval \"$(symfony-autocomplete --aliases laminas)\" The above should be placed in your shell configuration file: For BASH users, $HOME/.bashrc For ZSH users, $HOME/.zshrc For FISH users, $HOME/.config/fish/config.fish Once the changes have been made, either open a new terminal, or source your shell configuration: For BASH users, source $HOME/.bashrc For ZSH users, source $HOME/.zshrc For FISH users, source $HOME/.config/fish/config.fish","title":"Configuration"},{"location":"autocompletion/#usage","text":"Once installation and configuration of the tooling is complete and you are either in a new terminal or have sourced the changes to your shell configuration, you can invoke autocompletion by pressing &lt;Tab&gt; after typing the laminas command at the prompt: $ laminas &lt;TAB&gt;","title":"Usage"},{"location":"command-chains/","text":"Command chains Sometimes you may want to execute another command straight after the successful completion of another command. As an example, consider the following two command classes: namespace MyApp\\Command; use Symfony\\Component\\Console\\Command\\Command; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Output\\OutputInterface; class FirstCommand extends Command { /** @var string */ protected static $defaultName = 'first-command'; protected function configure() : void { $this-&gt;setName(self::$defaultName); $this-&gt;addOption('name', null, InputOption::VALUE_REQUIRED, 'Module name'); } protected function execute(InputInterface $input, OutputInterface $output) : int { $output-&gt;writeln('First command: ' . $input-&gt;getOption('name')); return 0; } } namespace MyApp\\Command; use Symfony\\Component\\Console\\Command\\Command; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Output\\OutputInterface; class SecondCommand extends Command { /** @var string */ protected static $defaultName = 'second-command'; protected function configure() : void { $this-&gt;setName(self::$defaultName); $this-&gt;addOption('module', null, InputOption::VALUE_REQUIRED, 'Module name'); } protected function execute(InputInterface $input, OutputInterface $output) : int { $output-&gt;writeln('Second command: ' . $input-&gt;getOption('module')); return 0; } } We can expose each to laminas-cli, and also create a chain , whereby when the first command finishes execution, it will then invoke the second: namespace MyApp\\Command; return [ 'laminas-cli' =&gt; [ 'commands' =&gt; [ 'first-command' =&gt; Command\\FirstCommand::class, 'second-command' =&gt; Command\\SecondCommand::class, ], 'chains' =&gt; [ Command\\FirstCommand::class =&gt; [ Command\\SecondCommand::class =&gt; ['--name' =&gt; '--module'], ], ], ], ]; \"chains\" configuration options We discuss chain configuration in more detail below . Running ./vendor/bin/laminas first-command will result with: $ ./vendor/bin/laminas first-command --name=Foo First command: Foo Executing second-command. Do you want to continue? [Y] yes, continue [s] skip this command, [n] no, break &gt; yes, continue Second command: Foo Please note that only successful result of the first command will trigger the second command. The final result (exit code) of the chained commands will be the result of the last executed command. If a command in the middle of the chain results in a failure status, execution will halt with that command, and its status will be returned. Chain configuration Chain configuration is under the \"chains\" section of the \"laminas-cli\" configuration: &lt;?php return [ 'laminas-cli' =&gt; [ 'chains' =&gt; [ /* . . . */ ], ], ]; The configuration is expected to be an associative array mapping command names you have previously defined in the \"commands\" section of the \"laminas-cli\" configuration, and the value is an associative array: 'chains' =&gt; [ COMMAND_CLASS_NAME =&gt; CHAINED_COMMANDS ], The chained commands ( CHAINED_COMMANDS ) are themselves an associative array, where the key is the name of a command you have already defined in the \"commands\" section of the \"laminas-cli\" configuration, and the value is an associative array: 'chains' =&gt; [ COMMAND_CLASS_NAME =&gt; [ CHAINED_COMMAND_CLASS_NAME =&gt; INPUT_MAPPER, ], ], An input mapper ( INPUT_MAPPER ) can be one of two things: a string class name of an implemention of Laminas\\Cli\\Input\\Mapper\\InputMapperInterface an array specification Most commonly, you will use an array specification. In this case, items can take two forms: a key/value pair, where the key is the option or argument from the previous command, and the value is the option or argument by which to provide the value to the chained command. an array, with a single key/value pair of the option or argument name on the chained command, and the value to use with it. As a visualization: 'chains' =&gt; [ COMMAND_CLASS_NAME =&gt; [ 'argument-on-previous-command' =&gt; 'argument-on-this-command', '--option-on-previous-command' =&gt; '--option-on-this-command', ['an-argument-on-this-command' =&gt; 'argument value to supply'], ['--an-option-on-this-command' =&gt; 'option value to supply'], ], ], When specifying options, the -- prefix should be used with the option names, just like you'd invoke them from the command line if you were to call the command by itself. Chain command input mapper example If we return to the original example from the first section of this page: namespace MyApp\\Command; return [ 'laminas-cli' =&gt; [ 'commands' =&gt; [ 'first-command' =&gt; Command\\FirstCommand::class, 'second-command' =&gt; Command\\SecondCommand::class, ], 'chains' =&gt; [ Command\\FirstCommand::class =&gt; [ Command\\SecondCommand::class =&gt; ['--name' =&gt; '--module'], ], ], ], ]; We have defined two commands, FirstCommand and SecondCommand . FirstCommand defines the option --name , while SecondCommand defines the option --module . In the above configuration, we indicate that when we call FirstCommand , we want to start a command chain that also invokes SecondCommand . When it does so, it should take the value provided via the --name option and pass that value to the SecondCommand --module option. In effect, that would be similar to calling the following commands in sequence: $ ./vendor/bin/laminas first-command --name Foo $ ./vendor/bin/laminas second-command --module Foo Since FirstCommand now provides a chain, we can call: $ ./vendor/bin/laminas first-command --name Foo and Foo will be passed for the --module option when SecondCommand is invoked as part of the chain. InputMapperInterface As noted in the previous section, you can provide a string class name of a Laminas\\Cli\\Input\\Mapper\\InputMapperInterface implementation to use in order to map arguments and options from one command to another. That interface defines one method: namespace Laminas\\Cli\\Input\\Mapper; use Symfony\\Component\\Console\\Input\\InputInterface; interface InputMapperInterface { public function __invoke(InputInterface $input): array; } The return value should be an associative array mapping arguments and options to the values they contain, suitable for use with Symfony\\Component\\Console\\Input\\ArrayInput ( see symfony/console documentation for details ); Example The initial section of this page [ 'name' =&gt; 'module', // adds \"module\" argument to the next command call with the value of \"name\" argument from the previous command '--mode' =&gt; '--type', // adds \"--type\" option to the next command call with the value of \"--mode\" option from the previous command ['additional-arg' =&gt; 'arg-value'], // adds \"additional-arg\" argument to the next command call with the value \"arg-value\" ['--additional-opt' =&gt; 'opt-value'], // adds \"--additional-opt\" option to the next command call with the value \"opt-value\" ], It is also possible to provide class name (string) which implements Laminas\\Cli\\Input\\Mapper\\InputMapperInterface if you need more customised mapper between input of the previous and next command.","title":"Command Chains"},{"location":"command-chains/#command-chains","text":"Sometimes you may want to execute another command straight after the successful completion of another command. As an example, consider the following two command classes: namespace MyApp\\Command; use Symfony\\Component\\Console\\Command\\Command; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Output\\OutputInterface; class FirstCommand extends Command { /** @var string */ protected static $defaultName = 'first-command'; protected function configure() : void { $this-&gt;setName(self::$defaultName); $this-&gt;addOption('name', null, InputOption::VALUE_REQUIRED, 'Module name'); } protected function execute(InputInterface $input, OutputInterface $output) : int { $output-&gt;writeln('First command: ' . $input-&gt;getOption('name')); return 0; } } namespace MyApp\\Command; use Symfony\\Component\\Console\\Command\\Command; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Output\\OutputInterface; class SecondCommand extends Command { /** @var string */ protected static $defaultName = 'second-command'; protected function configure() : void { $this-&gt;setName(self::$defaultName); $this-&gt;addOption('module', null, InputOption::VALUE_REQUIRED, 'Module name'); } protected function execute(InputInterface $input, OutputInterface $output) : int { $output-&gt;writeln('Second command: ' . $input-&gt;getOption('module')); return 0; } } We can expose each to laminas-cli, and also create a chain , whereby when the first command finishes execution, it will then invoke the second: namespace MyApp\\Command; return [ 'laminas-cli' =&gt; [ 'commands' =&gt; [ 'first-command' =&gt; Command\\FirstCommand::class, 'second-command' =&gt; Command\\SecondCommand::class, ], 'chains' =&gt; [ Command\\FirstCommand::class =&gt; [ Command\\SecondCommand::class =&gt; ['--name' =&gt; '--module'], ], ], ], ];","title":"Command chains"},{"location":"command-chains/#chain-configuration","text":"Chain configuration is under the \"chains\" section of the \"laminas-cli\" configuration: &lt;?php return [ 'laminas-cli' =&gt; [ 'chains' =&gt; [ /* . . . */ ], ], ]; The configuration is expected to be an associative array mapping command names you have previously defined in the \"commands\" section of the \"laminas-cli\" configuration, and the value is an associative array: 'chains' =&gt; [ COMMAND_CLASS_NAME =&gt; CHAINED_COMMANDS ], The chained commands ( CHAINED_COMMANDS ) are themselves an associative array, where the key is the name of a command you have already defined in the \"commands\" section of the \"laminas-cli\" configuration, and the value is an associative array: 'chains' =&gt; [ COMMAND_CLASS_NAME =&gt; [ CHAINED_COMMAND_CLASS_NAME =&gt; INPUT_MAPPER, ], ], An input mapper ( INPUT_MAPPER ) can be one of two things: a string class name of an implemention of Laminas\\Cli\\Input\\Mapper\\InputMapperInterface an array specification Most commonly, you will use an array specification. In this case, items can take two forms: a key/value pair, where the key is the option or argument from the previous command, and the value is the option or argument by which to provide the value to the chained command. an array, with a single key/value pair of the option or argument name on the chained command, and the value to use with it. As a visualization: 'chains' =&gt; [ COMMAND_CLASS_NAME =&gt; [ 'argument-on-previous-command' =&gt; 'argument-on-this-command', '--option-on-previous-command' =&gt; '--option-on-this-command', ['an-argument-on-this-command' =&gt; 'argument value to supply'], ['--an-option-on-this-command' =&gt; 'option value to supply'], ], ], When specifying options, the -- prefix should be used with the option names, just like you'd invoke them from the command line if you were to call the command by itself.","title":"Chain configuration"},{"location":"command-chains/#inputmapperinterface","text":"As noted in the previous section, you can provide a string class name of a Laminas\\Cli\\Input\\Mapper\\InputMapperInterface implementation to use in order to map arguments and options from one command to another. That interface defines one method: namespace Laminas\\Cli\\Input\\Mapper; use Symfony\\Component\\Console\\Input\\InputInterface; interface InputMapperInterface { public function __invoke(InputInterface $input): array; } The return value should be an associative array mapping arguments and options to the values they contain, suitable for use with Symfony\\Component\\Console\\Input\\ArrayInput ( see symfony/console documentation for details );","title":"InputMapperInterface"},{"location":"command-chains/#example","text":"The initial section of this page [ 'name' =&gt; 'module', // adds \"module\" argument to the next command call with the value of \"name\" argument from the previous command '--mode' =&gt; '--type', // adds \"--type\" option to the next command call with the value of \"--mode\" option from the previous command ['additional-arg' =&gt; 'arg-value'], // adds \"additional-arg\" argument to the next command call with the value \"arg-value\" ['--additional-opt' =&gt; 'opt-value'], // adds \"--additional-opt\" option to the next command call with the value \"opt-value\" ], It is also possible to provide class name (string) which implements Laminas\\Cli\\Input\\Mapper\\InputMapperInterface if you need more customised mapper between input of the previous and next command.","title":"Example"},{"location":"command-params/","text":"Command Params The Symfony Console component allows commands to define input arguments and options . The laminas-cli package adds a third possibility, input parameters , which allow you to define command options that will become interactive prompts when omitted during command invocation. Using input parameters Internally, input parameters behave like standard options with the following modifications: Input parameters are optional by default. In interactive mode, when retrieving a parameter value that was not provided as an option, the user will be asked to provide the value. In non-interactive mode, if the user does not supply the option during invocation, and the parameter is not marked as required, its default value will be used; otherwise, an exception will be thrown, If the parameter has validations or normalizations supplied, these will be applied regardless of whether the option is provided during invocation or when the user is prompted to provide it. If the user provides a value via a prompt, that value will be stored as an input option so it can be passed to the next command in the chain (if one is defined). Input parameter types Input parameters are classes that implement Laminas\\Cli\\Input\\InputParamInterface : namespace Laminas\\Cli\\Input; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Question\\Question; interface InputParamInterface { /** * Default value to use if none provided. * * @return null|mixed */ public function getDefault(); public function getDescription(): string; public function getName(): string; /** * Return the Symfony\\Component\\Console\\Input\\InputOption::VALUE_* type. */ public function getOptionMode(): int; public function getShortcut(): ?string; public function getQuestion(): Question; public function isRequired(): bool; /** * @param mixed $defaultValue */ public function setDefault($defaultValue): self; public function setDescription(string $description): self; public function setShortcut(string $shortcut): self; public function setRequiredFlag(bool $required): self; } We provide the abstract class Laminas\\Cli\\Input\\AbstractInputParam to implement the majority of the methods in the interface; the only items you need to fill in are: getQuestion() : Each parameter type will define its own Question to return. protected $optionMode , which is set to Symfony\\Component\\Console\\Input\\InputOption::VALUE_REQUIRED by default. The constructor has one required parameter, a string $name ; you will need to call parent::__construct($name) if you override the constructor (e.g., to supply other required arguments). Many input types can likely allow multiple values. For example, if you have a --path option where you want to allow the user to supply a set of paths on which to perform an operation, or a --class operation to allow the user to specify multiple clases to generate. In those scenarios, we provide a trait, Laminas\\Cli\\Input\\AllowMultipleTrait , which defines a single method: public function setAllowMultipleFlag(bool $flag): self This method will update the $optionMode mask to either include or remove the InputOption::VALUE_IS_ARRAY bit. Compose it in your custom param implementations if you want to allow users the ability to specify more than one value for a parameter. Another trait, Laminas\\Cli\\Input\\StandardQuestionTrait , provides the method createQuestion() , which returns a Symfony\\Component\\Console\\Question\\Question instance with a prompt in the form of: &lt;question&gt;{description}&lt;/question&gt; [&lt;comment&gt;{default}&lt;/comment&gt;]: &gt; This allows an implementation to use the standard format question, and then add things such as normalizers , validators , or autocompletion . Additionally, when the option mode includes InputOption::VALUE_IS_ARRAY (per the setAllowMultipleFlag() method as described previously), the application will prompt for multiple values using the same question and default value (if a default is available) until the user presses Return without entering anything. You can compose this trait in your own input param implementations, and call it from your getQuestion() method if that question format will work for you. Standard input parameter types We ship several standard input parameter types for use in your applications. All parameters require the parameter name as the initial argument, and additional arguments as specified below. All parameter types EXCEPT the BoolParam compose the AllowMultipleTrait , exposing the setAllowMultipleFlag() flag. Additionally, when writing validators, you do not need to check if the value is not required and an empty value submitted; ParamAwareInputInterface::getParam() does this for you. BoolParam Laminas\\Cli\\Input\\BoolParam allows specifying a parameter with a boolean value. It emits a Symfony\\Component\\Console\\Question\\ConfirmationQuestion . namespace Laminas\\Cli\\Input; final class BoolParam extends AbstractInputParam { public function __construct(string $name); } ChoiceParam Laminas\\Cli\\Input\\ChoiceParam allows specifying a set of choices from which the user may select a value, emitting a Symfony\\Component\\Console\\Question\\ChoiceQuestion . namespace Laminas\\Cli\\Input; final class ChoiceParam extends AbstractInputParam { use StandardQuestionTrait; public function __construct(string $name, array $haystack); } IntParam Laminas\\Cli\\Input\\IntParam allows specifying that a value must be an integer, and optionally be more than a minimum value and/or less than a maximum value. namespace Laminas\\Cli\\Input; final class IntParam extends AbstractInputParam { use StandardQuestionTrait; public function __construct(string $name); public function setMin(?int $min): self; public function setMax(?int $max): self; } PathParam Laminas\\Cli\\Input\\PathParam allows specifying that a value must be a path on the filesystem, requiring that you specifiy which, and optionally requiring that it exist. namespace Laminas\\Cli\\Input; final class PathParam extends AbstractInputParam { use StandardQuestionTrait; public const TYPE_DIR = 'dir'; public const TYPE_FILE = 'file'; /** * @param string $pathType One of the TYPE_* constants, indicating whether * the path expected should be a directory or a file. */ public function __construct(string $name, string $pathType); public function setPathMustExist(bool $flag): self; } StringParam Laminas\\Cli\\Input\\StringParam allows specifying that a value must be a string, and optionally match a PCRE regex. namespace Laminas\\Cli\\Input; final class StringParam extends AbstractInputParam { use StandardQuestionTrait; public function __construct(string $name); /** * @param string $pattern A valid PCRE regex pattern. */ public function setPattern(string $pattern): self; } Adding input parameters to a command In order to define input parameters in your command, your command will need to extend Laminas\\Cli\\Command\\AbstractParamAwareCommand . That class class extends Symfony\\Component\\Console\\Command\\Command and provides one additional method, addParam() , for adding an input parameter. The method accepts a single parameter, a Laminas\\Cli\\Input\\InputParamInterface instance. As an example, the following command adds a \"name\" parameter that expects a string: use Laminas\\Cli\\Command\\AbstractParamAwareCommand; use Laminas\\Cli\\Input\\ParamAwareInputInterface; use Laminas\\Cli\\Input\\StringParam; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Output\\OutputInterface; final class HelloCommand extends AbstractParamAwareCommand { /** @var string */ public static $defaultName = 'example:hello'; protected function configure() : void { $this-&gt;setName(self::$defaultName); $this-&gt;addParam( (new StringParam('name')) -&gt;setDescription('Your name') -&gt;setShortcut('n') ); } /** * @param ParamAwareInputInterface $input */ protected function execute(InputInterface $input, OutputInterface $output) : int { $name = $input-&gt;getParam('name'); $output-&gt;writeln('Hello ' . $name . '!'); return 0; } } ParamAwareInputInterface Internally, we decorate the input instance from the application with a class implementing our own ParamAwareInputInterface . This interface extends each of Symfony\\Component\\Console\\Input\\InputInterface and StreamableInputInterface , and adds the method getParam(string $name) for retrieving the input parameter. To ensure IDE completion and static analysis work as expected, you should typehint the $input argument as a ParamAwareInputInterface via a parameter annotation. (You cannot do so via type hint, as it would break compatibility with the AbstractCommand signature.) Adding parameters is similar to adding arguments or options, with one key difference: you provide an instance, instead of a series of values. The InputParamInterface and the various concrete implementations define builder methods that return $this , allowing you to create the instances in-line in a declarative manner. Accessing the parameter value is exactly like accessing an option or argument. However, unlike those items, parameters will prompt for values if they are missing. Let's see what happens when we call the command without the parameter: $ vendor/bin/laminas example:hello Your name: &gt; Michal Hello Michal! If we provide the param value as an option during invocation: $ vendor/bin/laminas example:hello --name=Michal Hello Michal! As you can see, there is no prompt! AbstractParamAwareCommand::run The AbstractParamAwareCommand class overrides the symfony/console Command::run() method internally in order to decorate the input in a ParamAwareInputInterface implementation. If you decide you need to override the method yourself you MUST add one of the following lines within your implementation: // If you will be calling the parent run() method: parent::run($input, $output); // If you will not be calling the parent run() method: $input = $this-&gt;decorateInputToBeParamAware($input, $output); Creating custom parameter types If none of the standard input parameter types satisfy your use case, you can define a custom parameter type. As an example: use Laminas\\Cli\\Input\\AbstractInputParam; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Question\\Question; class CustomParam extends AbstractInputParam { public function getQuestion(): Question { $customQuestion = new Question('Please provide value for custom parameter:'); // some question modifications, like: $customQuestion-&gt;setValidator(static function (string $value) { /* ... */ }); $customQuestion-&gt;setAutocompleterCallback(static function (string $answer) { /* ... */ }); $customQuestion-&gt;setNormalizer(static function (string $answer) { /* ... */ }); // etc... return $question; } } In your command, you would then add it: $this-&gt;addParam( (new CustomParam('custom')) -&gt;setDescription('Custom parameter') -&gt;setRequiredFlag(true) ); Alternately, you could define it as an anonymous class implementation, inline where you add the parameter: $this-&gt;addParam( (new class('custom') extends \\Laminas\\Cli\\Input\\AbstractInputParam { public function getQuestion(): Question { $customQuestion = new Question('Please provide value for custom parameter:'); // some question modifications, like: $customQuestion-&gt;setValidator(static function (string $value) { /* ... */ }); $customQuestion-&gt;setAutocompleterCallback(static function (string $answer) { /* ... */ }); $customQuestion-&gt;setNormalizer(static function (string $answer) { /* ... */ }); // etc... return $question; } } ) -&gt;setDescription('Custom parameter') -&gt;setRequiredFlag(true) );","title":"Command Params"},{"location":"command-params/#command-params","text":"The Symfony Console component allows commands to define input arguments and options . The laminas-cli package adds a third possibility, input parameters , which allow you to define command options that will become interactive prompts when omitted during command invocation.","title":"Command Params"},{"location":"command-params/#using-input-parameters","text":"Internally, input parameters behave like standard options with the following modifications: Input parameters are optional by default. In interactive mode, when retrieving a parameter value that was not provided as an option, the user will be asked to provide the value. In non-interactive mode, if the user does not supply the option during invocation, and the parameter is not marked as required, its default value will be used; otherwise, an exception will be thrown, If the parameter has validations or normalizations supplied, these will be applied regardless of whether the option is provided during invocation or when the user is prompted to provide it. If the user provides a value via a prompt, that value will be stored as an input option so it can be passed to the next command in the chain (if one is defined).","title":"Using input parameters"},{"location":"command-params/#input-parameter-types","text":"Input parameters are classes that implement Laminas\\Cli\\Input\\InputParamInterface : namespace Laminas\\Cli\\Input; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Question\\Question; interface InputParamInterface { /** * Default value to use if none provided. * * @return null|mixed */ public function getDefault(); public function getDescription(): string; public function getName(): string; /** * Return the Symfony\\Component\\Console\\Input\\InputOption::VALUE_* type. */ public function getOptionMode(): int; public function getShortcut(): ?string; public function getQuestion(): Question; public function isRequired(): bool; /** * @param mixed $defaultValue */ public function setDefault($defaultValue): self; public function setDescription(string $description): self; public function setShortcut(string $shortcut): self; public function setRequiredFlag(bool $required): self; } We provide the abstract class Laminas\\Cli\\Input\\AbstractInputParam to implement the majority of the methods in the interface; the only items you need to fill in are: getQuestion() : Each parameter type will define its own Question to return. protected $optionMode , which is set to Symfony\\Component\\Console\\Input\\InputOption::VALUE_REQUIRED by default. The constructor has one required parameter, a string $name ; you will need to call parent::__construct($name) if you override the constructor (e.g., to supply other required arguments). Many input types can likely allow multiple values. For example, if you have a --path option where you want to allow the user to supply a set of paths on which to perform an operation, or a --class operation to allow the user to specify multiple clases to generate. In those scenarios, we provide a trait, Laminas\\Cli\\Input\\AllowMultipleTrait , which defines a single method: public function setAllowMultipleFlag(bool $flag): self This method will update the $optionMode mask to either include or remove the InputOption::VALUE_IS_ARRAY bit. Compose it in your custom param implementations if you want to allow users the ability to specify more than one value for a parameter. Another trait, Laminas\\Cli\\Input\\StandardQuestionTrait , provides the method createQuestion() , which returns a Symfony\\Component\\Console\\Question\\Question instance with a prompt in the form of: &lt;question&gt;{description}&lt;/question&gt; [&lt;comment&gt;{default}&lt;/comment&gt;]: &gt; This allows an implementation to use the standard format question, and then add things such as normalizers , validators , or autocompletion . Additionally, when the option mode includes InputOption::VALUE_IS_ARRAY (per the setAllowMultipleFlag() method as described previously), the application will prompt for multiple values using the same question and default value (if a default is available) until the user presses Return without entering anything. You can compose this trait in your own input param implementations, and call it from your getQuestion() method if that question format will work for you.","title":"Input parameter types"},{"location":"command-params/#standard-input-parameter-types","text":"We ship several standard input parameter types for use in your applications. All parameters require the parameter name as the initial argument, and additional arguments as specified below. All parameter types EXCEPT the BoolParam compose the AllowMultipleTrait , exposing the setAllowMultipleFlag() flag. Additionally, when writing validators, you do not need to check if the value is not required and an empty value submitted; ParamAwareInputInterface::getParam() does this for you.","title":"Standard input parameter types"},{"location":"command-params/#adding-input-parameters-to-a-command","text":"In order to define input parameters in your command, your command will need to extend Laminas\\Cli\\Command\\AbstractParamAwareCommand . That class class extends Symfony\\Component\\Console\\Command\\Command and provides one additional method, addParam() , for adding an input parameter. The method accepts a single parameter, a Laminas\\Cli\\Input\\InputParamInterface instance. As an example, the following command adds a \"name\" parameter that expects a string: use Laminas\\Cli\\Command\\AbstractParamAwareCommand; use Laminas\\Cli\\Input\\ParamAwareInputInterface; use Laminas\\Cli\\Input\\StringParam; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Output\\OutputInterface; final class HelloCommand extends AbstractParamAwareCommand { /** @var string */ public static $defaultName = 'example:hello'; protected function configure() : void { $this-&gt;setName(self::$defaultName); $this-&gt;addParam( (new StringParam('name')) -&gt;setDescription('Your name') -&gt;setShortcut('n') ); } /** * @param ParamAwareInputInterface $input */ protected function execute(InputInterface $input, OutputInterface $output) : int { $name = $input-&gt;getParam('name'); $output-&gt;writeln('Hello ' . $name . '!'); return 0; } }","title":"Adding input parameters to a command"},{"location":"command-params/#creating-custom-parameter-types","text":"If none of the standard input parameter types satisfy your use case, you can define a custom parameter type. As an example: use Laminas\\Cli\\Input\\AbstractInputParam; use Symfony\\Component\\Console\\Input\\InputOption; use Symfony\\Component\\Console\\Question\\Question; class CustomParam extends AbstractInputParam { public function getQuestion(): Question { $customQuestion = new Question('Please provide value for custom parameter:'); // some question modifications, like: $customQuestion-&gt;setValidator(static function (string $value) { /* ... */ }); $customQuestion-&gt;setAutocompleterCallback(static function (string $answer) { /* ... */ }); $customQuestion-&gt;setNormalizer(static function (string $answer) { /* ... */ }); // etc... return $question; } } In your command, you would then add it: $this-&gt;addParam( (new CustomParam('custom')) -&gt;setDescription('Custom parameter') -&gt;setRequiredFlag(true) ); Alternately, you could define it as an anonymous class implementation, inline where you add the parameter: $this-&gt;addParam( (new class('custom') extends \\Laminas\\Cli\\Input\\AbstractInputParam { public function getQuestion(): Question { $customQuestion = new Question('Please provide value for custom parameter:'); // some question modifications, like: $customQuestion-&gt;setValidator(static function (string $value) { /* ... */ }); $customQuestion-&gt;setAutocompleterCallback(static function (string $answer) { /* ... */ }); $customQuestion-&gt;setNormalizer(static function (string $answer) { /* ... */ }); // etc... return $question; } } ) -&gt;setDescription('Custom parameter') -&gt;setRequiredFlag(true) );","title":"Creating custom parameter types"},{"location":"events/","text":"Events The symfony/console component allows attaching an event dispatcher instance to a console application. During the lifetime of a console command, the application will trigger a number of events, to which you may subscribe listeners. Internally, laminas/laminas-cli itself adds a listener on the Symfony\\Component\\Console\\ConsoleEvents::TERMINATE event in order to provide command chains . If you wish to subscribe to any of the various symfony/console events , you will need to provide an alternate event dispatcher instance. You may do so by defining a Laminas\\Cli\\SymfonyEventDispatcher service in your container that resolves to a Symfony\\Component\\EventDispatcher\\EventDispatcherInterface instance. (We use this instead of the more generic Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface so that we can use its addSubscriber() method to subscribe our own listener.) Listeners that are callable can be attached using the addListener() method. As an example, let's say you want to register the Symfony\\Component\\Console\\EventListener\\ErrorListener in your console application for purposes of debugging. First, we will create a factory for this listener in the file src/App/ConsoleErrorListenerFactory.php : &lt;?php declare(strict_types=1); namespace App; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; use Symfony\\Component\\EventDispatcher\\EventListener\\ErrorListener; final class ConsoleErrorListenerFactory { public function __invoke(ContainerInterface $container): ErrorListener { return new ErrorListener($container-&gt;get(LoggerInterface::class)); } } The above example assumes you have already wired the Psr\\Log\\LoggerInterface service in your container configuration. Next, we will create the class App\\ConsoleEventDispatcherFactory in the file src/App/ConsoleEventDispatcherFactory.php . The factory will create an EventDispatcher instance, attach the error listener, and return the dispatcher. &lt;?php declare(strict_types=1); namespace App; use Psr\\Container\\ContainerInterface; use Symfony\\Component\\EventDispatcher\\EventDispatcher; use Symfony\\Component\\EventDispatcher\\EventListener\\ErrorListener; final class ConsoleEventDispatcherFactory { public function __invoke(ContainerInterface $container): EventDispatcher { $dispatcher = new EventDispatcher(); $dispatcher-&gt;addSubscriber($container-&gt;get(ErrorListener::class)); return $dispatcher; } } Finally, we need to wire both our ErrorListener and our EventDispatcher services in our container. We can do so by creating a configuration file named config/autoload/console.global.php if it does not already exist, and adding the following contents: &lt;?php return [ '{CONTAINER_KEY}' =&gt; [ 'factories' =&gt; [ 'Laminas\\Cli\\SymfonyEventDispatcher' =&gt; \\App\\ConsoleEventDispatcherFactory::class, \\Symfony\\Component\\EventDispatcher\\EventListener\\ErrorListener::class =&gt; \\App\\ConsoleErrorListenerFactory::class, // ... ], // ... ], // ... ]; For the value of {CONTAINER_KEY} , substitute the following: For laminas-mvc applications, use the value \"service_manager\". For Mezzio applications, use the value \"dependencies\". Later, if you want to register other listeners, you can either update your App\\ConsoleEventDispatcherFactory , or you can add delegator factories on the \"Laminas\\Cli\\SymfonyEventDispatcher\" service. Read the symfony/console events documentation more information on how to add listeners to the event dispatcher.","title":"Events"},{"location":"events/#events","text":"The symfony/console component allows attaching an event dispatcher instance to a console application. During the lifetime of a console command, the application will trigger a number of events, to which you may subscribe listeners. Internally, laminas/laminas-cli itself adds a listener on the Symfony\\Component\\Console\\ConsoleEvents::TERMINATE event in order to provide command chains . If you wish to subscribe to any of the various symfony/console events , you will need to provide an alternate event dispatcher instance. You may do so by defining a Laminas\\Cli\\SymfonyEventDispatcher service in your container that resolves to a Symfony\\Component\\EventDispatcher\\EventDispatcherInterface instance. (We use this instead of the more generic Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface so that we can use its addSubscriber() method to subscribe our own listener.) Listeners that are callable can be attached using the addListener() method. As an example, let's say you want to register the Symfony\\Component\\Console\\EventListener\\ErrorListener in your console application for purposes of debugging. First, we will create a factory for this listener in the file src/App/ConsoleErrorListenerFactory.php : &lt;?php declare(strict_types=1); namespace App; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; use Symfony\\Component\\EventDispatcher\\EventListener\\ErrorListener; final class ConsoleErrorListenerFactory { public function __invoke(ContainerInterface $container): ErrorListener { return new ErrorListener($container-&gt;get(LoggerInterface::class)); } } The above example assumes you have already wired the Psr\\Log\\LoggerInterface service in your container configuration. Next, we will create the class App\\ConsoleEventDispatcherFactory in the file src/App/ConsoleEventDispatcherFactory.php . The factory will create an EventDispatcher instance, attach the error listener, and return the dispatcher. &lt;?php declare(strict_types=1); namespace App; use Psr\\Container\\ContainerInterface; use Symfony\\Component\\EventDispatcher\\EventDispatcher; use Symfony\\Component\\EventDispatcher\\EventListener\\ErrorListener; final class ConsoleEventDispatcherFactory { public function __invoke(ContainerInterface $container): EventDispatcher { $dispatcher = new EventDispatcher(); $dispatcher-&gt;addSubscriber($container-&gt;get(ErrorListener::class)); return $dispatcher; } } Finally, we need to wire both our ErrorListener and our EventDispatcher services in our container. We can do so by creating a configuration file named config/autoload/console.global.php if it does not already exist, and adding the following contents: &lt;?php return [ '{CONTAINER_KEY}' =&gt; [ 'factories' =&gt; [ 'Laminas\\Cli\\SymfonyEventDispatcher' =&gt; \\App\\ConsoleEventDispatcherFactory::class, \\Symfony\\Component\\EventDispatcher\\EventListener\\ErrorListener::class =&gt; \\App\\ConsoleErrorListenerFactory::class, // ... ], // ... ], // ... ]; For the value of {CONTAINER_KEY} , substitute the following: For laminas-mvc applications, use the value \"service_manager\". For Mezzio applications, use the value \"dependencies\". Later, if you want to register other listeners, you can either update your App\\ConsoleEventDispatcherFactory , or you can add delegator factories on the \"Laminas\\Cli\\SymfonyEventDispatcher\" service. Read the symfony/console events documentation more information on how to add listeners to the event dispatcher.","title":"Events"},{"location":"faq/","text":"FAQ Error when installing due to ocramius/package-versions Do you receive the following error when attempting to install laminas/laminas-cli in your application? don't install ocramius/package-versions 1.9.0|don't install composer/package-versions-deprecated 1.10.99 If so, you will also need to require composer/package-versions-deprecated when installing laminas/laminas-cli : $ composer require composer/package-versions-deprecated laminas/laminas-cli composer/package-versions-deprecated is a drop-in replacement for ocramius/package-versions that works across a broader number of PHP versions. It is marked \"deprecated\" as Composer v2 will incorporate the functionality it provides natively.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#error-when-installing-due-to-ocramiuspackage-versions","text":"Do you receive the following error when attempting to install laminas/laminas-cli in your application? don't install ocramius/package-versions 1.9.0|don't install composer/package-versions-deprecated 1.10.99 If so, you will also need to require composer/package-versions-deprecated when installing laminas/laminas-cli : $ composer require composer/package-versions-deprecated laminas/laminas-cli composer/package-versions-deprecated is a drop-in replacement for ocramius/package-versions that works across a broader number of PHP versions. It is marked \"deprecated\" as Composer v2 will incorporate the functionality it provides natively.","title":"Error when installing due to ocramius/package-versions"},{"location":"intro/","text":"Introduction laminas-cli is a command-line interface for Laminas projects. It provides seamless integration with Laminas MVC and Mezzio applications. Both third-party packages and your own application can extend it by writing commands and exposing them to the laminas-cli binary via configuration. Integrating in Components If you'd like to add integration with laminas-cli into your components, you will need to do the following: Add laminas/laminas-cli as a dev dependency: $ composer require --dev laminas/laminas-cli Create a command class in your library: namespace MyNamespace\\Command; use Symfony\\Component\\Console\\Command\\Command; class MyCommand extends Command { // ... } If your command has dependencies, register the command and its factory in the container. Commands that can be instantiated with no constructor arguments can omit container configuration: // config/autoload/dependencies.global.php: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ MyNamespace\\Command\\MyCommand::class =&gt; MyNamespace\\Command\\MyCommandFactory::class, ], ], ]; Register the command with the CLI tooling: // config/autoload/global.php: return [ 'laminas-cli' =&gt; [ 'commands' =&gt; [ 'package:command-name' =&gt; MyNamespace\\Command\\MyCommand::class, ], ], ]; Register Command in an Application with ConfigProvider Class like Mezzio If your component is providing a ConfigProvider (such as in Mezzio applications), please provide the configuration in that class instead: namespace MyNamespace; class ConfigProvider { public function __invoke() : array { return [ 'laminas-cli' =&gt; $this-&gt;getCliConfig(), 'dependencies' =&gt; $this-&gt;getDependencyConfig(), ]; } public function getCliConfig() : array { return [ 'commands' =&gt; [ 'package:command-name' =&gt; Command\\MyCommand::class, ], ]; } public function getDependencyConfig() : array { return [ 'factories' =&gt; [ Command\\MyCommand::class =&gt; Command\\MyCommandFactory::class, ], ]; } } Register Command in a laminas-mvc Application If you want to provide a Module class for Laminas MVC, provide a ConfigProvider as noted above, and then add the following Module class declaration: namespace MyNamespace; class Module { public function getConfig() : array { $configProvider = new ConfigProvider(); return [ 'laminas-cli' =&gt; $configProvider-&gt;getCliConfig(), 'service_manager' =&gt; $configProvider-&gt;getDependencyConfig(), ]; } } Integration in Other Applications laminas-cli supports Laminas MVC and Mezzio applications out of the box. If you want to use the tool with a different application type, or you have modified the default configuration and your PSR-11 container cannot be detected automatically, you can still use the laminas-cli tool. To integrate such applications with laminas-cli, you will need to create a file that returns a PSR-11 container. Do so in the file config/container.php or if you already have such a file in another location, use the --container=&lt;path&gt; option. Such a file might look like the following: &lt;?php // File config/container.php declare(strict_types=1); use JSoumelidis\\SymfonyDI\\Config\\Config; use JSoumelidis\\SymfonyDI\\Config\\ContainerFactory; $config = require realpath(__DIR__) . '/../var/config.php'; $factory = new ContainerFactory(); return $factory(new Config($config)); Once such a file is in place, the laminas-cli binary will be able to use your container to seed its application. Usage List To list all available commands, run: $ ./vendor/bin/laminas [--container=&lt;path&gt;] Execute To execute a specific command, run: $ ./vendor/bin/laminas [--container=&lt;path&gt;] &lt;command-name&gt; Help To get help on a single command, run: $ ./vendor/bin/laminas [--container=&lt;path&gt;] help &lt;command-name&gt;","title":"Introduction"},{"location":"intro/#introduction","text":"laminas-cli is a command-line interface for Laminas projects. It provides seamless integration with Laminas MVC and Mezzio applications. Both third-party packages and your own application can extend it by writing commands and exposing them to the laminas-cli binary via configuration.","title":"Introduction"},{"location":"intro/#integrating-in-components","text":"If you'd like to add integration with laminas-cli into your components, you will need to do the following: Add laminas/laminas-cli as a dev dependency: $ composer require --dev laminas/laminas-cli Create a command class in your library: namespace MyNamespace\\Command; use Symfony\\Component\\Console\\Command\\Command; class MyCommand extends Command { // ... } If your command has dependencies, register the command and its factory in the container. Commands that can be instantiated with no constructor arguments can omit container configuration: // config/autoload/dependencies.global.php: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ MyNamespace\\Command\\MyCommand::class =&gt; MyNamespace\\Command\\MyCommandFactory::class, ], ], ]; Register the command with the CLI tooling: // config/autoload/global.php: return [ 'laminas-cli' =&gt; [ 'commands' =&gt; [ 'package:command-name' =&gt; MyNamespace\\Command\\MyCommand::class, ], ], ];","title":"Integrating in Components"},{"location":"intro/#integration-in-other-applications","text":"laminas-cli supports Laminas MVC and Mezzio applications out of the box. If you want to use the tool with a different application type, or you have modified the default configuration and your PSR-11 container cannot be detected automatically, you can still use the laminas-cli tool. To integrate such applications with laminas-cli, you will need to create a file that returns a PSR-11 container. Do so in the file config/container.php or if you already have such a file in another location, use the --container=&lt;path&gt; option. Such a file might look like the following: &lt;?php // File config/container.php declare(strict_types=1); use JSoumelidis\\SymfonyDI\\Config\\Config; use JSoumelidis\\SymfonyDI\\Config\\ContainerFactory; $config = require realpath(__DIR__) . '/../var/config.php'; $factory = new ContainerFactory(); return $factory(new Config($config)); Once such a file is in place, the laminas-cli binary will be able to use your container to seed its application.","title":"Integration in Other Applications"},{"location":"intro/#usage","text":"","title":"Usage"}]}